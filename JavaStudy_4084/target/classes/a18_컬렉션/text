List<E>: 순서가 있는 데이터의 집합으로, 데이터 중복을 허용
-배열이라고 생각하면 됨

Set<E>: 순서가 없는 데이터의 집합으로, 데이터의 중복을 허용하지 않음

Map<K, V>: 키와 값의 한 쌍으로 이루어지는 데이터의 집합으로, 순서가 없음
		   이때 키는 중복을 허용하지 않지만, 값은 중복될 수 있음.
		   

collection 인터페이스
-boolean add(E e): 해당 컬렉션에 전달된 요소를 추가함.(선택적 기능)
-void clear(): 해당 컬렉션의 모든 요소를 제거함.(선택적 기능)
-boolean contains(Object o): 해당 컬렉션이 전달된 객체를 포함하고 있는지를 확인함.
-boolean equals(Object o): 해당 컬렉션과 전달된 객체가 같은지를 확인
-boolean isEmpty(): 해당 컬렉션이 비어있는지를 확인함.
-Itertor<E> iterator(): 해당 컬렉션의 반복자를 반환함(정렬)
-boolean remove(Object o): 해당 컬렉션에서 전달된 객체를 제거함.(선택적 기능)
-int size(): 해당 컬렉션의 요소를 총 개수를 반환함.
-Object[] toArray(): 해당 컬렉션의 모든 요소를 Object 타입의 배열로 반환함.


List<E>
-ArrayList<E>
 `배열을 이용하기 때문에 인덱스를 이용해 배열 요소에 빠르게 접근 가능
 `배열은 크기를 변경할 수 없는 인스턴스이므로, 크기를 늘리기 위해서는 새로운 배열을 생성하고 기존의 요소들을 옮겨야 하는 복잡한 과정을
  거쳐야 함
 `물론 이 과정은 자동으로 수행, 요소의 추가 및 삭제 작업에 걸리는 시간이 매우 길어지는 단점
-LinkedList<E>
-Vector<E>
-Stack<E>

-Map 컬렉션 클래스
 `Collection 인터페이스와는 다른 저장 방식
 `Map 인터페이스를 구현한 모든 Map컬렉션 클래스들은 키와 값을 하나의 쌍으로
  저장하는 방식(key-value방식)을 사용
 `요소의 저장 순서를 유지하지 않는다.
 `키는 중복을 허용하지 않지만, 값의 중복은 허용
-HashMap<K, V>
 `해시 알고리즘을 사용 --> 검색 속도가 매우 빠름
 `add --> put, set --> replace
 `containKey, containValue 
-Hashtable<K, V>
-TreeMap<K, V>
